;1)
(define (basic-set)
  (let ((set '()))
    (define (empty?)
      (if (null? set)
          #t
          #f))
    (define (insert x)
      (define (helper set)
        (cond ((null? set) (cons x '()))
              ((> x (car set)) (cons (car set) (helper (cdr set))))
              (else (cons x set))))
      (begin (set! set (helper set))
             set))
    (define (delete x)
      (define (helper set)
        (cond ((null? set) set)
              ((= x (car set)) (helper (cdr set)))
              (else (cons (car set) (helper (cdr set))))))
      (begin (set! set (helper set))
             set))
    (define (element? x)
      (define (helper)
        (cond ((null? set) #f)
              ((= (car set) x) #t)
              (else (helper (cdr set)))))
      (helper))
  (lambda (method)
    (cond ((eq? method 'empty) empty?)
          ((eq? method 'insert) insert)
          ((eq? method 'element?) element?)
          ((eq? method 'delete) delete)))))
(define newset (basic-set))
((newset 'empty))
((newset 'insert) 2)
((newset 'element?) 2)
((newset 'delete) 2)
((newset 'empty))

;2)
(define (stat-set)
  (let* ((set '())
        (max 0)
        (min 0)
        (size 0)
        (average 0)
        (sum 0))
    (define (empty?)
      (if (null? set)
          #t
          #f))
    (define (insert x)
      (define (helper x set)
            (begin (cond ((null? set) 
                          (begin (set! max x) max))
                         ((> x max) (begin (set! max x) max))
                         (else max))
                   (cond ((null? set)
                          (begin (set! min x) min))
                         ((< x min) (begin (set! min x) min))
                         (else min))
                       (begin (set! size (+ 1 size)) size)
                       (begin (set! sum (+ sum x)) sum)
                       (begin (set! average (/ sum size)) average))
        (cond (null? (cons x set))
              ((> x (car set)) (cons (car set) (helper x (cdr set))))
              (else (cons x set))))
      (begin (set! set (helper x set)) set))
    (define (element? x)
      (define (helper set)
        (if (= x (car set))
            #t
            (helper (cdr set))))
      (helper set))
    (lambda (method)
      (cond ((eq? method 'empty?) empty?)
            ((eq? method 'insert) insert)
            ((eq? method 'element?) element?)
            ((eq? method 'largest) (lambda () max))
            ((eq? method 'smallest) (lambda () min))
            ((eq? method 'size) (lambda () size))
            ((eq? method 'average) (lambda () average))))))
(define newset (stat-set))
((newset 'insert) 5)
((newset 'size))
((newset 'smallest))
((newset 'largest))
((newset 'average))
((newset 'insert) 2)
((newset 'size))
((newset 'smallest))
((newset 'largest))
((newset 'average))

;3)
(define (multiset)
    (let* ((multiset (list (cons 1 1) (cons 2 2) (cons 3 1) (cons 8 2))))
      (define (empty?)
        (if (null? multiset)
            #t
            #f))
      
      (define (insert x)
        (define (helper-insert multiset)
          (cond ((null? multiset) (cons (cons x 1) '()))
                ((= x (car (car multiset)))
                 (begin (set-cdr! (car multiset) (+ 1 (cdr (car multiset)))) (car multiset))
                                  (cons (car multiset) (cdr multiset)))
                ((> x (car (car multiset)))
                 (cons (car multiset) (helper-insert (cdr multiset))))
                ((< x (car (car multiset)))
                 (cons (cons x 1) (cdr multiset)))))
        (begin (set! multiset (helper-insert multiset)) multiset))
      
      (define (multiplicity? x)
        (define (helper multiset)
          (cond ((null? multiset) 0)
                ((= x (car (car multiset))) (cdr (car multiset)))
                (else (helper (cdr multiset)))))
        (helper multiset))
      
      (define (delete x)
        (define (helper-delete multiset)
          (cond ((null? multiset) '())
                ((= (car (car multiset)) x)
                 (begin (set-cdr! (car multiset) 
                                  (if (> (cdr (car multiset)) 0)
                                      (- (cdr (car multiset)) 1)
                                      (car multiset))))
                 (if (= 0 (cdr (car multiset)))
                     (cdr multiset)
                     (cons (car multiset) (cdr multiset))))
                (else (cons (car multiset) (helper-delete (cdr multiset))))))
        (begin (set! multiset (helper-delete multiset)) multiset))
      
      (define (delete-all x)
        (define (helper-delete-all multiset)
          (cond ((null? multiset) '())
                ((= (car (car multiset)) x)
                 (cdr multiset))
                (else (cons (car multiset) (helper-delete-all (cdr multiset))))))
        (begin (set! multiset (helper-delete-all multiset)) multiset))
      
    (lambda (method)
      (cond ((eq? method 'empty?) empty?)
            ((eq? method 'insert) insert)
            ((eq? method 'multiplicity?) multiplicity?)
            ((eq? method 'delete) delete)
            ((eq? method 'delete-all) delete-all)))))
(define mymultiset (multiset))
((mymultiset 'empty?))
((mymultiset 'insert) 3)
((mymultiset 'insert) 1)
((mymultiset 'insert) 9)
((mymultiset 'insert) 6)
((mymultiset 'insert) 10)
((mymultiset 'multiplicity?) 3)
((mymultiset 'delete-all) 1)
((mymultiset 'delete) 6)
((mymultiset 'delete) 3)
((mymultiset 'delete) 0)
((mymultiset 'delete-all) 10)
((mymultiset 'delete) 9)
((mymultiset 'delete) 3)
((mymultiset 'delete-all) 2)
((mymultiset 'empty?))


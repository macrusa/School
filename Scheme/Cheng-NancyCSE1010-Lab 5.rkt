;1)
(define (pair a)
  (cons a (* a a)))
(pair 2)

;2)
;car are numbers that can be multiplied. cdr are not numbers but lists so they have to be moved to car to perform the operand.
(define (f x) (* x x))
(define (square-1 lst)
  (if (null? lst)
      (list)
      (cons (f (car lst)) (square-1 (cdr lst)))))
(square-1 '(1 2 3))

;3)
(define (traverse lst)
  (if (null? lst)
     0
     (+ 1 (traverse (cdr lst)))))
(traverse '(1 2 3 4 5))

;4)
(define (pair p)
    (define (range a b)
    (if (= a b)
        (cons b '())
        (cons a (range (+ a 1) b))))
  (range (car p) (cdr p)))
(pair (cons 2 5))

;5)
(define (sv-mult a x)
  (if (null? x)
      '()
      (cons (* a (car x)) (sv-mult a (cdr x)))))
(sv-mult 2 '(1 2 3))

;6)
(define (vector-add x y)
  (if (or (null? x) (null? y))
          '()
          (cons (+ (car x) (car y)) (vector-add (cdr x) (cdr y)))))
(vector-add '(1 2 3) '(1 2 3))

;7)
(define (vector-subtract x y)
  (if (or (null? x) (null? y))
      '()
      (cons (- (car x) (car y)) (vector-subtract (cdr x) (cdr y)))))
(vector-subtract '(7 7 7) '(7 0 0))

;8)
(define (dot-product x y)
  (define (sum lst)
    (if (null? lst)
        '()
        (+ (car lst) (sum (cdr lst)))))
  (define (product x y)
    (if (or (null? x) (null? y))
        '()
        (cons (* (car x) (car y)) (product (cdr x) (cdr y)))))
  (sum (product x y)))
(dot-product '(1 2 3) '(3 5 8))